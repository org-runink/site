<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-Tenancy on Runink</title>
    <link>https://runink.org/tags/multi-tenancy/</link>
    <description>Recent content in Multi-Tenancy on Runink</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://runink.org/tags/multi-tenancy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Runink: Rethinking Data Pipelines with Go, Raft, and Linux Primitives</title>
      <link>https://runink.org/blog/runink-go-raft-linux-data-pipelines/</link>
      <pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate>
      <guid>https://runink.org/blog/runink-go-raft-linux-data-pipelines/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&#xA;Runink is a streamlined, Go-native platform for managing secure and efficient data pipelines without Kubernetes. It uses Linux primitives (namespaces, cgroups) for isolation, Raft consensus for strong consistency and governance, and complies with open standards such as OpenLineage, Open Data Contracts, and OpenTelemetry—simplifying orchestration, enhancing performance, and ensuring transparent data governance.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;br&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;runink-rethinking-data-pipelines-with-go-raft-and-linux-primitives&#34;&gt;Runink: Rethinking Data Pipelines with Go, Raft, and Linux Primitives&lt;/h1&gt;&#xA;&lt;p&gt;Modern data platforms often rely on complex stacks involving Kubernetes, Spark, Airflow, and DBT—each tool addressing part of the data pipeline lifecycle. Runink presents a radically simplified, vertically integrated alternative: a Go-native distributed pipeline execution and governance platform built upon Linux primitives and Raft consensus. In this article, we&amp;rsquo;ll explore the core components of Runink—Runink CLI/API, Runi Agent/Slices, the Barn Domain Model Control Plane, and Herd Domain Boundary Controls—and demonstrate how they redefine pipeline orchestration.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
